{
  "data": [
    {
      "title": "番外：Rx--隐藏在Angular 2.x中利剑",
      "message": "这里还有个小故事，Netflix之所以做RxJava完全是一个偶然。个中缘由是由于Netflix的系统越做越复杂，大家都绞尽脑汁琢磨怎么才能从这些复杂逻辑的地狱中把系统拯救出来。一天，一个从微软跳槽过来的员工和主管说，我们原来在微软做的一个叫Rx的东东挺好的，可以非常简单的处理这些逻辑。主管理都没理，心想微软那套东西肯定又臃肿又不好用，从来没听说过微软有什么好的开源产品。但那位前微软的哥们锲而不舍，非常执着，不断和组内员工和主管游说，宣传这个Rx思想有多牛X。终于有一天，大家受不了了，说，这么着吧，给你个机会，你给大家仔细讲讲这个Rx，我们讨论看看到底适不适合。于是这哥们一顿喷，把大家都惊住了，微软竟然有这么好的东西。但是这东西是.Net的，怎么办呢，那就写一个吧（此处略去高山仰止的3000字）。",
      "code": "change.html:45 &#60;!DOCTYPE&#160;html&#62;&#10;&#60;html&#62;&#10;&#60;head&#62;&#10;&#160;&#160;&#60;meta&#160;charset=&#34;utf-8&#34;&#62;&#10;&#160;&#160;&#60;meta&#160;name=&#34;viewport&#34;&#160;content=&#34;width=device-width&#34;&#62;&#10;&#160;&#160;&#60;title&#62;JS&#160;Bin&#60;/title&#62;&#10;&#160;&#160;&#60;script&#160;src=&#34;https://unpkg.com/@reactivex/rxjs@5.0.0-beta.7/dist/global/Rx.umd.js&#34;&#62;&#60;/script&#62;&#10;&#60;/head&#62;&#10;&#60;body&#62;&#10;&#160;&#160;&#60;input&#160;id=&#34;todo&#34;&#160;type=&#34;text&#34;/&#62;&#10;&#160;&#160;&#60;button&#160;id=&#34;addBtn&#34;&#62;Add&#60;/button&#62;&#10;&#60;/body&#62;&#10;&#60;/html&#62;"
    },
    {
      "title": "combineLatest操作符",
      "message": "既然现在我们已经有了两个流，应该试验一下合并类操作符了，先来试试 combineLatest，我们合并了按钮点击事件的数据流和文本框输入事件的数据流，并且返回一个对象，这个对象有两个属性，第一个是按钮事件数据流的值，第二个是文本输入事件数据流的值。也就是说应该是类似 { ev: 'clicked', input: '1'} 这样的结构。",
      "code": "change.html:45 let&#160;weight&#160;=&#160;document.getElementById(&#39;weight&#39;);&#10;let&#160;height&#160;=&#160;document.getElementById(&#39;height&#39;);&#10;let&#160;bmi&#160;=&#160;document.getElementById(&#39;bmi&#39;);&#10;&#10;let&#160;weight$&#160;=&#160;Rx.Observable&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.fromEvent(weight,&#160;&#39;input&#39;)&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.pluck(&#39;target&#39;,&#160;&#39;value&#39;);&#10;&#10;let&#160;height$&#160;=&#160;Rx.Observable&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.fromEvent(height,&#160;&#39;input&#39;)&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.pluck(&#39;target&#39;,&#160;&#39;value&#39;);&#10;&#10;let&#160;bmi$&#160;=&#160;Rx.Observable&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;.combineLatest(weight$,&#160;height$,&#160;(w,&#160;h)&#160;=&#62;&#160;w/(h*h/100/100));&#10;&#10;bmi$.subscribe(b&#160;=&#62;&#160;bmi.innerHTML=b);"
    },
    {
      "title": "创建类操作符",
      "message": "我们经常会遇到一些已有的代码，这些代码和类库往往不受我们的控制，无法重构或代价太大。我们需要在这种情况下可以利用Rx的话，就需要大量的可以从原有的代码中可以转换的方法。addXXXHandler和removeXXXHandler就是大家以前经常使用的一种模式，那么在Rx中也提供了对应的方法可以转换，那就是",
      "code": "change.html:45 function&#160;addClickHandler(handler)&#160;{&#10;&#160;&#160;document.addEventListener(&#39;click&#39;,&#160;handler);&#10;}&#10;&#10;function&#160;removeClickHandler(handler)&#160;{&#10;&#160;&#160;document.removeEventListener(&#39;click&#39;,&#160;handler);&#10;}&#10;&#10;var&#160;click$&#160;=&#160;Rx.Observable.fromEventPattern(&#10;&#160;&#160;addClickHandler,&#10;&#160;&#160;removeClickHandler&#10;);&#10;click$.subscribe(x&#160;=&#62;&#160;console.log(x));"
    }
  ]
}
