{
  "data": [
    {
      "title": "组件的优化工作",
      "message": "那么我们来为我们的app增加一个Component吧，在命令行窗口输入 ng generate component login --inline-template --inline-style 。 顾名思义，参数generate是用来生成文件的，参数component是说明我们要生成一个组件，login呢是我们的组件名称，你可以自己想个其他有意思的名字。后面的两个参数是告诉angular-cli：生成组件时，请把组件的HTML模板和CSS样式和组件放在同一个文件中（其实分开文件更清晰，但第一个例子我们还是采用inline方式了）。是不是感觉这个命令行太长了？幸运的是Angular团队也这么想，所以你可以把上面的命令改写成 ng g c login -it -is ,也就是说可以用generate的首字母g来代替generate，用component的首字母c来代替component，类似的--inline-template的两个词分别取首字母变成-it",
      "code": "import&#160;{&#160;Component,&#160;OnInit&#160;}&#160;from&#160;&#39;@angular/core&#39;;&#10;&#10;//@Component是Angular提供的装饰器函数，用来描述Compoent的元数据&#10;//其中selector是指这个组件的在HTML模板中的标签是什么&#10;//template是嵌入（inline）的HTML模板，如果使用单独文件可用templateUrl&#10;//styles是嵌入（inline）的CSS样式，如果使用单独文件可用styleUrls&#10;@Component({&#10;&#160;&#160;selector:&#160;&#39;app-login&#39;,&#10;&#160;&#160;template:&#160;`&#10;&#160;&#160;&#160;&#160;&#60;p&#62;&#10;&#160;&#160;&#160;&#160;&#160;&#160;login&#160;Works!&#10;&#160;&#160;&#160;&#160;&#60;/p&#62;&#10;&#160;&#160;`,&#10;&#160;&#160;styles:&#160;[]&#10;})&#10;export&#160;class&#160;LoginComponent&#160;implements&#160;OnInit&#160;{&#10;&#10;&#160;&#160;constructor()&#160;{&#160;}&#10;&#10;&#160;&#160;ngOnInit()&#160;{&#10;&#160;&#160;}&#10;&#10;}"
    },
    {
      "title": "什么是模块？",
      "message": "另一种方式是使用预编译器（AoT - Ahead-Of-Time）进行静态引导，静态方案可以生成更小、启动更快的应用，建议优先使用它，特别是在移动设备或高延迟网络下。使用static选项，Angular编译器作为构建流程的一部分提前运行，生成一组类工厂。它们的核心就是AppModuleNgFactory。引导预编译的AppModuleNgFactory的语法和动态引导AppModule类的方式很相似。",
      "code": "change.html:45 &#60;!doctype&#160;html&#62;&#10;&#60;html&#62;&#10;&#60;head&#62;&#10;&#160;&#160;&#60;meta&#160;charset=&#34;utf-8&#34;&#62;&#10;&#160;&#160;&#60;title&#62;HelloAngular&#60;/title&#62;&#10;&#160;&#160;&#60;base&#160;href=&#34;/&#34;&#62;&#10;&#10;&#160;&#160;&#60;meta&#160;name=&#34;viewport&#34;&#160;content=&#34;width=device-width,&#160;initial-scale=1&#34;&#62;&#10;&#160;&#160;&#60;link&#160;rel=&#34;icon&#34;&#160;type=&#34;image/x-icon&#34;&#160;href=&#34;favicon.ico&#34;&#62;&#10;&#60;/head&#62;&#10;&#60;body&#62;&#10;&#160;&#160;&#60;app-root&#62;Loading...&#60;/app-root&#62;&#10;&#60;/body&#62;&#10;&#60;/html&#62;"
    },
    {
      "title": "第五节：多用户版本的待办事项应用",
      "message": "第四节我们完成的Todo的基本功能看起来还不错，但是有个大问题，就是每个用户看到的都是一样的待办事项，我们希望的是每个用户拥有自己的待办事项列表。我们来分析一下怎么做，如果每个todo对象带一个UserId属性是不是可以解决呢？好像可以，逻辑大概是这样：用户登录后转到/todo，TodoComponent得到当前用户的UserId，然后调用TodoService中的方法，传入当前用户的UserId，TodoService中按UserId去筛选当前用户的Todos。",
      "code": "change.html:45 {&#10;&#160;&#160;&#34;todos&#34;:&#160;[&#10;&#160;&#160;&#160;&#160;{&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;id&#34;:&#160;&#34;bf75769b-4810-64e9-d154-418ff2dbf55e&#34;,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;desc&#34;:&#160;&#34;getting&#160;up&#34;,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;completed&#34;:&#160;false,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;userId&#34;:&#160;1&#10;&#160;&#160;&#160;&#160;},&#10;&#160;&#160;&#160;&#160;{&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;id&#34;:&#160;&#34;5894a12f-dae1-5ab0-5761-1371ba4f703e&#34;,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;desc&#34;:&#160;&#34;have&#160;breakfast&#34;,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;completed&#34;:&#160;true,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;userId&#34;:&#160;2&#10;&#160;&#160;&#160;&#160;},&#10;&#160;&#160;&#160;&#160;{&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;id&#34;:&#160;&#34;0d2596c4-216b-df3d-1608-633899c5a549&#34;,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;desc&#34;:&#160;&#34;go&#160;to&#160;school&#34;,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;completed&#34;:&#160;true,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;userId&#34;:&#160;1&#10;&#160;&#160;&#160;&#160;},&#10;&#160;&#160;&#160;&#160;{&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;id&#34;:&#160;&#34;0b1f6614-1def-3346-f070-d6d39c02d6b7&#34;,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;desc&#34;:&#160;&#34;test&#34;,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;completed&#34;:&#160;false,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;userId&#34;:&#160;2&#10;&#160;&#160;&#160;&#160;},&#10;&#160;&#160;&#160;&#160;{&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;id&#34;:&#160;&#34;c1e02a43-6364-5515-1652-a772f0fab7b3&#34;,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;desc&#34;:&#160;&#34;This&#160;is&#160;a&#160;te&#34;,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;completed&#34;:&#160;false,&#10;&#160;&#160;&#160;&#160;&#160;&#160;&#34;userId&#34;:&#160;1&#10;&#160;&#160;&#160;&#160;}&#10;&#160;&#160;]&#10;}"
    }
  ]
}
